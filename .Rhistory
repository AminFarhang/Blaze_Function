source('~/Xin_Code/AFS.R')
getwd
getwd()
install.packages("alphahull")
source('~/Xin_Code/AFS.R')
source('~/Xin_Code/AFS.R')
source('~/Xin_Code/AFS.R')
source('~/Xin_Code/AFS.R')
source('~/Xin_Code/AFS.R')
source('~/Xin_Code/AFS.R')
packages.install("alphahull")
install.packages("alphahull")
lib.path
lib.path()
.libPaths()
install.packages('package.zip', lib='/Users/jiguangli/anaconda3/lib/R/library',repos = NULL)
install.packages('alphahull_2.1.tar.gz', lib='/Users/jiguangli/anaconda3/lib/R/library',repos = NULL)
install.packages("alphahull")
source('~/Xin_Code/example.R')
source('~/Xin_Code/example.R')
source('~/Xin_Code/example.R')
source('~/Xin_Code/example.R')
install.packages("alphahull",dependencies=TRUE)
lapply(toInstall, library, character.only = TRUE)
# Generate some sample data:
myData <- data.frame(x = rnorm(500), y = rnorm(500))
# With a unit-circle hole in the center:
myData <- myData[sqrt(rowSums(myData^2)) > 1, ]
plot(myData)
# Convex hull
cHullPoints <- chull(myData)
polygon(myData[cHullPoints, ])
aHullPoints <- ahull(myData, alpha = 1)
plot(aHullPoints)  # Plot alpha hull
plot(aHullPoints, wlines = "both")  # with Delaunay triangulation and Voronoi
# Area and lenght of alpha hull shape
areaahull(aHullPoints)
lengthahull(aHullPoints$arcs)
# See how the hull varies with alpha:
par(mfcol = c(4, 4), mai = c(0, 0, 0, 0))
lapply((1:16/10)^2, function(ii){
plot(ahull(myData, alpha = ii))
text(0, 0, ii)  })
par(mfcol = c(1, 1), mai = c(1, 1, 1, 1))
update.packages()
